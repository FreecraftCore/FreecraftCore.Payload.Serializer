using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using FreecraftCore.Serializer.Internal;
using JetBrains.Annotations;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

namespace FreecraftCore.Serializer
{
	public sealed class WireMessageImplementationMemberDeclarationEmitter : IMemberDeclarationEmittable
	{
		public string SerializerTypeName { get; }

		public INamedTypeSymbol TypeSymbol { get; }

		public WireMessageImplementationMemberDeclarationEmitter([NotNull] string serializerTypeName, INamedTypeSymbol typeSymbol)
		{
			if (string.IsNullOrWhiteSpace(serializerTypeName)) throw new ArgumentException("Value cannot be null or whitespace.", nameof(serializerTypeName));

			TypeSymbol = typeSymbol;

			bool usesCustomTypeSerializer = TypeSymbol.HasAttributeExact<CustomTypeSerializerAttribute>();

			if(!usesCustomTypeSerializer)
				SerializerTypeName = serializerTypeName;
			else
			{
				AttributeData data = TypeSymbol.GetAttributeExact<CustomTypeSerializerAttribute>();
				SerializerTypeName = ((ITypeSymbol)data.ConstructorArguments.First().Value).ToFullName();
			}
		}

		//TODO: Assumes the class is partial
		//TODO: Assumes it is a class and not a struct
		//TODO: Assumes that accessibility is public
		public MemberDeclarationSyntax Create()
		{
			bool requiresOverride = TypeSymbol.ImplementsInterface<ISelfSerializable>(true)
				&& !TypeSymbol.HasAttributeExact<AutoGeneratedWireMessageImplementationAttribute>(false);

			if (!requiresOverride && TypeSymbol.BaseType != null)
			{
				if (TypeSymbol.BaseType.IsWireMessageType())
					requiresOverride = true;
			}

			ITypeSymbol wireMessageType = requiresOverride ? GetRootWireMessageType() : TypeSymbol;

			//Create actual member content
			TypeDeclarationSyntax classDeclaration = CreateTypeDeclaration()
				.WithModifiers
				(
					TokenList
					(
						new[]
						{
							Token
							(
								TriviaList
								(
									Tab
								),
								SyntaxKind.PublicKeyword,
								TriviaList
								(
									Space
								)
							),
							Token
							(
								TriviaList(),
								SyntaxKind.PartialKeyword,
								TriviaList
								(
									Space
								)
							)
						}
					)
				)
				.WithKeyword
				(
					Token
					(
						TriviaList(),
						this.TypeSymbol.IsRecord ? SyntaxKind.RecordKeyword : SyntaxKind.ClassKeyword,
						TriviaList
						(
							Space
						)
					)
				);

			if (!requiresOverride)
			{
				classDeclaration = classDeclaration.WithBaseList
				(
					BaseList
						(
							SingletonSeparatedList<BaseTypeSyntax>
							(
								SimpleBaseType
								(
									GenericName
										(
											Identifier("IWireMessage")
										)
										.WithTypeArgumentList
										(
											TypeArgumentList
												(
													SingletonSeparatedList<TypeSyntax>
													(
														IdentifierName(wireMessageType.Name)
													)
												)
												.WithGreaterThanToken
												(
													Token
													(
														TriviaList(),
														SyntaxKind.GreaterThanToken,
														TriviaList
														(
															CarriageReturnLineFeed
														)
													)
												)
										)
								)
							)
						)
						.WithColonToken
						(
							Token
							(
								TriviaList(),
								SyntaxKind.ColonToken,
								TriviaList
								(
									Space
								)
							)
						)
				);
			}

			classDeclaration = classDeclaration.WithOpenBraceToken
				(
					Token
					(
						TriviaList
						(
							Tab
						),
						SyntaxKind.OpenBraceToken,
						TriviaList
						(
							CarriageReturnLineFeed
						)
					)
				)
				.WithMembers
				(
					List<MemberDeclarationSyntax>
					(
						new MemberDeclarationSyntax[]
						{
							PropertyDeclaration
								(
									IdentifierName
									(
										Identifier
										(
											TriviaList(),
											"Type",
											TriviaList
											(
												Space
											)
										)
									),
									Identifier
									(
										TriviaList(),
										"SerializableType",
										TriviaList
										(
											Space
										)
									)
								)
								.WithModifiers
								(
									TokenList
									(
										ComputeModifiers(requiresOverride)
									)
								)
								.WithExpressionBody
								(
									ArrowExpressionClause
										(
											TypeOfExpression
											(
												IdentifierName(TypeSymbol.Name)
											)
										)
										.WithArrowToken
										(
											Token
											(
												TriviaList(),
												SyntaxKind.EqualsGreaterThanToken,
												TriviaList
												(
													Space
												)
											)
										)
								)
								.WithSemicolonToken
								(
									Token
									(
										TriviaList(),
										SyntaxKind.SemicolonToken,
										TriviaList
										(
											CarriageReturnLineFeed
										)
									)
								),
							CreateReadWireMethodSyntax(wireMessageType, requiresOverride),
							MethodDeclaration
								(
									PredefinedType
									(
										Token
										(
											TriviaList(),
											SyntaxKind.VoidKeyword,
											TriviaList
											(
												Space
											)
										)
									),
									Identifier("Write")
								)
								.WithModifiers
								(
									TokenList
									(
										ComputeModifiers(requiresOverride)
									)
								)
								.WithParameterList
								(
									ParameterList
										(
											SeparatedList<ParameterSyntax>
											(
												new SyntaxNodeOrToken[]
												{
													Parameter
														(
															Identifier(CompilerConstants.SERIALZIABLE_OBJECT_REFERENCE_NAME)
														)
														.WithType
														(
															IdentifierName
															(
																Identifier
																(
																	TriviaList(),
																	wireMessageType.Name,
																	TriviaList
																	(
																		Space
																	)
																)
															)
														),
													Token
													(
														TriviaList(),
														SyntaxKind.CommaToken,
														TriviaList
														(
															Space
														)
													),
													Parameter
														(
															Identifier(CompilerConstants.BUFFER_NAME)
														)
														.WithType
														(
															GenericName
																(
																	Identifier("Span")
																)
																.WithTypeArgumentList
																(
																	TypeArgumentList
																		(
																			SingletonSeparatedList<TypeSyntax>
																			(
																				PredefinedType
																				(
																					Token(SyntaxKind.ByteKeyword)
																				)
																			)
																		)
																		.WithGreaterThanToken
																		(
																			Token
																			(
																				TriviaList(),
																				SyntaxKind.GreaterThanToken,
																				TriviaList
																				(
																					Space
																				)
																			)
																		)
																)
														),
													Token
													(
														TriviaList(),
														SyntaxKind.CommaToken,
														TriviaList
														(
															Space
														)
													),
													Parameter
														(
															Identifier(CompilerConstants.OFFSET_NAME)
														)
														.WithModifiers
														(
															TokenList
															(
																Token
																(
																	TriviaList(),
																	SyntaxKind.RefKeyword,
																	TriviaList
																	(
																		Space
																	)
																)
															)
														)
														.WithType
														(
															PredefinedType
															(
																Token
																(
																	TriviaList(),
																	SyntaxKind.IntKeyword,
																	TriviaList
																	(
																		Space
																	)
																)
															)
														)
												}
											)
										)
										.WithCloseParenToken
										(
											Token
											(
												TriviaList(),
												SyntaxKind.CloseParenToken,
												TriviaList
												(
													CarriageReturnLineFeed
												)
											)
										)
								)
								.WithBody
								(
									Block
										(
											SingletonList<StatementSyntax>
											(
												ExpressionStatement
													(
														InvocationExpression
															(
																MemberAccessExpression
																(
																	SyntaxKind.SimpleMemberAccessExpression,
																	MemberAccessExpression
																	(
																		SyntaxKind.SimpleMemberAccessExpression,
																		IdentifierName
																		(
																			Identifier
																			(
																				TriviaList
																				(
																					Whitespace("			")
																				),
																				SerializerTypeName,
																				TriviaList()
																			)
																		),
																		IdentifierName("Instance")
																	),
																	IdentifierName(TypeSymbol.IsRecord ? "Write" : "InternalWrite")
																)
															)
															.WithArgumentList
															(
																ArgumentList
																(
																	SeparatedList<ArgumentSyntax>
																	(
																		new SyntaxNodeOrToken[]
																		{
																			Argument
																			(
																				ThisExpression()
																			),
																			Token
																			(
																				TriviaList(),
																				SyntaxKind.CommaToken,
																				TriviaList
																				(
																					Space
																				)
																			),
																			Argument
																			(
																				IdentifierName(CompilerConstants.BUFFER_NAME)
																			),
																			Token
																			(
																				TriviaList(),
																				SyntaxKind.CommaToken,
																				TriviaList
																				(
																					Space
																				)
																			),
																			Argument
																				(
																					IdentifierName(CompilerConstants.OFFSET_NAME)
																				)
																				.WithRefKindKeyword
																				(
																					Token
																					(
																						TriviaList(),
																						SyntaxKind.RefKeyword,
																						TriviaList
																						(
																							Space
																						)
																					)
																				)
																		}
																	)
																)
															)
													)
													.WithSemicolonToken
													(
														Token
														(
															TriviaList(),
															SyntaxKind.SemicolonToken,
															TriviaList
															(
																CarriageReturnLineFeed
															)
														)
													)
											)
										)
										.WithOpenBraceToken
										(
											Token
											(
												TriviaList
												(
													Whitespace("		")
												),
												SyntaxKind.OpenBraceToken,
												TriviaList
												(
													CarriageReturnLineFeed
												)
											)
										)
										.WithCloseBraceToken
										(
											Token
											(
												TriviaList
												(
													Whitespace("		")
												),
												SyntaxKind.CloseBraceToken,
												TriviaList
												(
													CarriageReturnLineFeed
												)
											)
										)
								)
						}
					)
				)
				.WithCloseBraceToken
				(
					Token
					(
						TriviaList
						(
							Tab
						),
						SyntaxKind.CloseBraceToken,
						TriviaList
						(
							CarriageReturnLineFeed
						)
					)
				);

			classDeclaration = classDeclaration
				.WithAttributeLists
				(
					List<AttributeListSyntax>
					(
						new AttributeListSyntax[]
						{
							AttributeList
								(
									SingletonSeparatedList<AttributeSyntax>
									(
										Attribute
										(
											IdentifierName(nameof(AutoGeneratedWireMessageImplementationAttribute))
										)
									)
							)
							.WithOpenBracketToken
							(
								Token
								(
									TriviaList
									(
										Whitespace("    ")
									),
									SyntaxKind.OpenBracketToken,
									TriviaList()
								)
							)
							.WithCloseBracketToken
							(
								Token
								(
									TriviaList(),
									SyntaxKind.CloseBracketToken,
									TriviaList
									(
										CarriageReturnLineFeed
									)
								)
							)
						}
					)
				);

			NamespaceDeclarationSyntax member = NamespaceDeclaration
				(
					IdentifierName(wireMessageType.ContainingNamespace.FullNamespaceString())
				)
				.WithNamespaceKeyword
				(
					Token
					(
						TriviaList(),
						SyntaxKind.NamespaceKeyword,
						TriviaList
						(
							Space
						)
					)
				)
				.WithOpenBraceToken
				(
					Token
					(
						TriviaList(),
						SyntaxKind.OpenBraceToken,
						TriviaList
						(
							CarriageReturnLineFeed
						)
					)
				)
				.WithMembers
				(
					SingletonList<MemberDeclarationSyntax>
					(
						classDeclaration
					)
				);

			return member;
		}

		private MethodDeclarationSyntax CreateReadWireMethodSyntax(ITypeSymbol wireMessageType, bool requiresOverride)
		{
			var method = MethodDeclaration
				(
					IdentifierName
					(
						Identifier
						(
							TriviaList(),
							wireMessageType.Name,
							TriviaList
							(
								Space
							)
						)
					),
					Identifier("Read")
				)
				.WithModifiers
				(
					TokenList
					(
						ComputeModifiers(requiresOverride)
					)
				)
				.WithParameterList
				(
					ParameterList
						(
							SeparatedList<ParameterSyntax>
							(
								new SyntaxNodeOrToken[]
								{
									Parameter
										(
											Identifier(CompilerConstants.BUFFER_NAME)
										)
										.WithType
										(
											GenericName
												(
													Identifier("Span")
												)
												.WithTypeArgumentList
												(
													TypeArgumentList
														(
															SingletonSeparatedList<TypeSyntax>
															(
																PredefinedType
																(
																	Token(SyntaxKind.ByteKeyword)
																)
															)
														)
														.WithGreaterThanToken
														(
															Token
															(
																TriviaList(),
																SyntaxKind.GreaterThanToken,
																TriviaList
																(
																	Space
																)
															)
														)
												)
										),
									Token
									(
										TriviaList(),
										SyntaxKind.CommaToken,
										TriviaList
										(
											Space
										)
									),
									Parameter
										(
											Identifier(CompilerConstants.OFFSET_NAME)
										)
										.WithModifiers
										(
											TokenList
											(
												Token
												(
													TriviaList(),
													SyntaxKind.RefKeyword,
													TriviaList
													(
														Space
													)
												)
											)
										)
										.WithType
										(
											PredefinedType
											(
												Token
												(
													TriviaList(),
													SyntaxKind.IntKeyword,
													TriviaList
													(
														Space
													)
												)
											)
										)
								}
							)
						)
						.WithCloseParenToken
						(
							Token
							(
								TriviaList(),
								SyntaxKind.CloseParenToken,
								TriviaList
								(
									CarriageReturnLineFeed
								)
							)
						)
				);

			//Record types cannot support the class read style
			if (this.TypeSymbol.IsRecord)
			{
				method = method
					.WithBody
					(
						Block
						(
							SingletonList<StatementSyntax>
							(
								ThrowStatement
								(
									ObjectCreationExpression
										(
											IdentifierName("NotSupportedException")
										)
										.WithArgumentList
										(
											ArgumentList
											(
												SingletonSeparatedList<ArgumentSyntax>
												(
													Argument
													(
														LiteralExpression
														(
															SyntaxKind.StringLiteralExpression,
															Literal("Record types do not support WireMessage Read.")
														)
													)
												)
											)
										)
								)
							)
						)
					);
			}
			else
			{
				method = method
				.WithBody
				(
					Block
						(
							ExpressionStatement
								(
									InvocationExpression
										(
											MemberAccessExpression
											(
												SyntaxKind.SimpleMemberAccessExpression,
												MemberAccessExpression
												(
													SyntaxKind.SimpleMemberAccessExpression,
													IdentifierName
													(
														Identifier
														(
															TriviaList
															(
																Whitespace("			")
															),
															SerializerTypeName,
															TriviaList()
														)
													),
													IdentifierName("Instance")
												),
												IdentifierName(TypeSymbol.IsRecord ? "Read" : "InternalRead")
											)
										)
										.WithArgumentList
										(
											ArgumentList
											(
												SeparatedList<ArgumentSyntax>
												(
													new SyntaxNodeOrToken[]
													{
														Argument
														(
															ThisExpression()
														),
														Token
														(
															TriviaList(),
															SyntaxKind.CommaToken,
															TriviaList
															(
																Space
															)
														),
														Argument
														(
															IdentifierName(CompilerConstants.BUFFER_NAME)
														),
														Token
														(
															TriviaList(),
															SyntaxKind.CommaToken,
															TriviaList
															(
																Space
															)
														),
														Argument
															(
																IdentifierName(CompilerConstants.OFFSET_NAME)
															)
															.WithRefKindKeyword
															(
																Token
																(
																	TriviaList(),
																	SyntaxKind.RefKeyword,
																	TriviaList
																	(
																		Space
																	)
																)
															)
													}
												)
											)
										)
								)
								.WithSemicolonToken
								(
									Token
									(
										TriviaList(),
										SyntaxKind.SemicolonToken,
										TriviaList
										(
											CarriageReturnLineFeed
										)
									)
								),
							ReturnStatement
								(
									ThisExpression()
								)
								.WithReturnKeyword
								(
									Token
									(
										TriviaList
										(
											Whitespace("			")
										),
										SyntaxKind.ReturnKeyword,
										TriviaList
										(
											Space
										)
									)
								)
								.WithSemicolonToken
								(
									Token
									(
										TriviaList(),
										SyntaxKind.SemicolonToken,
										TriviaList
										(
											CarriageReturnLineFeed
										)
									)
								)
						)
						.WithOpenBraceToken
						(
							Token
							(
								TriviaList
								(
									Whitespace("		")
								),
								SyntaxKind.OpenBraceToken,
								TriviaList
								(
									CarriageReturnLineFeed
								)
							)
						)
						.WithCloseBraceToken
						(
							Token
							(
								TriviaList
								(
									Whitespace("		")
								),
								SyntaxKind.CloseBraceToken,
								TriviaList
								(
									CarriageReturnLineFeed
								)
							)
						)
				);
			}

			return method;
		}

		private TypeDeclarationSyntax CreateTypeDeclaration()
		{
			if (this.TypeSymbol.IsRecord)
				return RecordDeclaration
				(
					Token
					(
						TriviaList(),
						this.TypeSymbol.IsRecord ? SyntaxKind.RecordKeyword : SyntaxKind.ClassKeyword,
						TriviaList
						(
							Space
						)
					),
					Identifier
					(
						TriviaList(),
						TypeSymbol.Name,
						TriviaList
						(
							Space
						)
					)
				);

			return ClassDeclaration
			(
				Identifier
				(
					TriviaList(),
					TypeSymbol.Name,
					TriviaList
					(
						Space
					)
				)
			);
		}

		private SyntaxToken[] ComputeModifiers(bool requiresOverride)
		{
			if (requiresOverride)
				return new[]
				{
					Token
					(
						TriviaList
						(
							Whitespace("		")
						),
						SyntaxKind.PublicKeyword,
						TriviaList
						(
							Space
						)
					),
					Token
					(
						TriviaList(),
						SyntaxKind.OverrideKeyword,
						TriviaList
						(
							Space
						)
					)
				};
			else
			{
				//Case where it's a sealed type, we CANNOT have virtuals
				if (TypeSymbol.IsSealed)
				{
					return new[]
					{
						Token
						(
							TriviaList
							(
								Whitespace("		")
							),
							SyntaxKind.PublicKeyword,
							TriviaList
							(
								Space
							)
						)
					};
				}
				else
				{
					return new[]
					{
						Token
						(
							TriviaList
							(
								Whitespace("		")
							),
							SyntaxKind.PublicKeyword,
							TriviaList
							(
								Space
							)
						),
						Token
						(
							TriviaList(),
							SyntaxKind.VirtualKeyword,
							TriviaList
							(
								Space
							)
						)
					};
				}
			}
		}

		private ITypeSymbol GetRootWireMessageType()
		{
			var lastType = TypeSymbol.BaseType;
			var t = TypeSymbol.BaseType;

			while (t != null && t.BaseType != null && t.IsWireMessageType())
			{
				if (!t.IsWireMessageType())
					return lastType;

				lastType = t;
				t = t.BaseType;
			}

			return lastType;
		}
	}
}
